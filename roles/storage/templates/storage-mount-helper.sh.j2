#!/bin/bash
# Storage mount helper script for {{ ansible_hostname }}
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

# Function to get partition UUIDs
get_partition_uuids() {
    echo "=== Current System Partition UUIDs ==="
    echo "Backup partition UUID: {{ backup_partition_uuid | default('NOT_SET') }}"
    echo "Secrets partition UUID: {{ secrets_partition_uuid | default('NOT_SET') }}"
    echo "Toast partition UUID: {{ toast_partition_uuid | default('NOT_SET') }}"
    echo ""
    echo "=== All LUKS partitions on system ==="
    sudo blkid -t TYPE=crypto_LUKS
}

# Function to update the mount script with correct UUIDs
update_mount_script() {
    echo "To update the mount script with correct UUIDs:"
    echo "1. Run 'sudo blkid -t TYPE=crypto_LUKS' to find your partition UUIDs"
    echo "2. Edit the playbook variables in group_vars/all.yml:"
    echo "   backup_partition_uuid: 'your-backup-uuid-here'"
    echo "   secrets_partition_uuid: 'your-secrets-uuid-here'" 
    echo "   toast_partition_uuid: 'your-toast-uuid-here'"
    echo "3. Re-run the storage role: ansible-playbook playbook.yaml --tags storage"
}

# Function to test mounting
test_mount() {
    local mount_point=$1
    local mapper_name=$(basename "$mount_point")
    
    echo "Testing mount for $mount_point..."
    if mountpoint -q "$mount_point"; then
        echo "$mount_point is already mounted"
        return 0
    fi
    
    if [ -e "/dev/mapper/$mapper_name" ]; then
        echo "LUKS container $mapper_name is already open"
        sudo mount "/dev/mapper/$mapper_name" "$mount_point"
        echo "$mount_point mounted successfully"
    else
        echo "LUKS container $mapper_name needs to be opened first"
        echo "Use the dmenu script (Super+Shift+d) or manually:"
        echo "sudo cryptsetup luksOpen /dev/disk/by-uuid/UUID $mapper_name"
    fi
}

case "$1" in
    "uuids"|"uuid")
        get_partition_uuids
        ;;
    "update")
        update_mount_script
        ;;
    "test")
        if [ -z "$2" ]; then
            echo "Usage: $0 test [backup|secrets|toast]"
            exit 1
        fi
        test_mount "/$2"
        ;;
    *)
        echo "Usage: $0 {uuids|update|test [backup|secrets|toast]}"
        echo ""
        echo "Commands:"
        echo "  uuids  - Show current partition UUIDs"
        echo "  update - Show how to update mount script"
        echo "  test   - Test mounting a specific partition"
        ;;
esac
